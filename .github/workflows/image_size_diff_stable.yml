# Workflow for building and publishing data contracts in Python

name: Docker Image Size diff stable

on: pull_request

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: write
    steps:

      # --------------- Setup ---------------

      - name: Inspect event payload
        run: cat ${{ github.event_path }}

      - name: Checkout base, step 1
        uses: actions/checkout@v3
        with:
          # For base, any 'ref' will work, since we will checkout the merge-base
          # manually.
          fetch-depth: 0
          path: base/

      - name: Checkout base, step 2
        working-directory: base/
        run: |
          # Note that using github.base_ref yields the following error:
          # fatal: Not a valid object name master
          # This is because the checkout action doesn't create local branches.
          # Because of that, we take the commit hashes from event.pull_request. The
          # base.sha might be out of date, but for merge-base this is not a problem.
          BASE_COMMIT=${{ github.event.pull_request.base.sha }}
          HEAD_COMMIT=${{ github.event.pull_request.head.sha }}
          MERGE_BASE=$(git merge-base $BASE_COMMIT $HEAD_COMMIT)
          git checkout $MERGE_BASE

      - name: Checkout head
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          path: head/

      - name: Install deps
        run: |
          # From https://github.com/wagoodman/dive#installation
          wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
          sudo apt install ./dive_0.9.2_linux_amd64.deb
          dive --version
          jq --version

      # --------------- Transform ---------------

      - name: Transform base
        env:
          SIDE: base
        working-directory: base/
        run: |
          docker build -f Dockerfile $PWD --tag "${SIDE}"
          dive "${SIDE}" --json analysis.json
          git rev-parse HEAD > "commit.txt"
          jq '.image.sizeBytes' analysis.json > "result.txt"
        
      - name: Transform head
        env:
          SIDE: head
        working-directory: head/
        run: |
          docker build -f Dockerfile . --tag "${SIDE}"
          dive "${SIDE}" --json analysis.json
          git rev-parse HEAD > "commit.txt"
          jq '.image.sizeBytes' analysis.json > "result.txt"

      # --------------- Report ---------------

      - name: Report
        run: |
          BASE_COMMIT=$(cat base/commit.txt)
          HEAD_COMMIT=$(cat head/commit.txt)
          BASE_SIZE=$(cat base/result.txt)
          HEAD_SIZE=$(cat head/result.txt)
          ABS_INCREASE=$(bc -l <<<"$HEAD_SIZE - $BASE_SIZE")
          REL_INCREASE=$(bc -l <<<"100.0 * $ABS_INCREASE / $BASE_SIZE")

          (
            printf "Diff results between %s and %s (stable):\n\n" "${BASE_COMMIT}" "${HEAD_COMMIT}"
            printf "The image size before this change was: %.2e bytes.\n" "${BASE_SIZE}"
            printf "The image size with this change is: %.2e bytes.\n" "${HEAD_SIZE}"
            printf "Absolute change: %+.2e bytes.\n" "${ABS_INCREASE}"
            printf "Relative change: %+.2f%%.\n" "${REL_INCREASE}"
          ) > output

          # Even though this is slightly ugly, it's the only way to set multiline
          # environment variables that can be used in the next step:
          # https://trstringer.com/github-actions-multiline-strings/
          echo 'diff_report<<EOF' >> $GITHUB_ENV
          cat output >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Notify PR with results
        uses: KeisukeYamashita/create-comment@v1
        if: env.diff_report != ''
        with:
          check-only-first-line: true
          unique: true
          comment: |
            <!-- diff-report-stable-gha-tag -->
            ${{ env.diff_report }}
